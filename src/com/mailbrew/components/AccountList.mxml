<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
         xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 creationComplete="onCreationComplete();">
	<fx:Script>
		<![CDATA[
			import com.mailbrew.components.skins.AccountListRenderer;
			import com.mailbrew.data.MainAppViews;
			import com.mailbrew.database.Database;
			import com.mailbrew.database.DatabaseEvent;
			import com.mailbrew.database.DatabaseResponder;
			import com.mailbrew.events.CheckMailEvent;
			import com.mailbrew.events.DeleteAccountEvent;
			import com.mailbrew.events.PopulateAccountInfoEvent;
			import com.mailbrew.events.ReorderAccountsEvent;
			import com.mailbrew.model.ModelLocator;
			import com.mailbrew.util.WindowManager;
			
			import flash.display.NativeMenu;
			import flash.display.NativeMenuItem;
			import flash.display.NativeWindow;
			import flash.display.Screen;
			import flash.events.Event;
			import flash.events.MouseEvent;
			import flash.geom.Point;
			
			import mx.binding.utils.ChangeWatcher;
			import mx.events.CloseEvent;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.events.PropertyChangeEvent;
			
			import spark.events.IndexChangeEvent;
			
			private var ml:ModelLocator;
			
			private function onCreationComplete():void
			{
				ChangeWatcher.watch(ModelLocator.getInstance(), "accounts", onAccountsChange);
				this.ml = ModelLocator.getInstance();
			}
			
			private function onAccountsChange(e:PropertyChangeEvent):void
			{
				this.accountList.selectedItem = null;
				for each (var accountInfo:Object in ml.accounts)
				{
					if (accountInfo.selected)
					{
						this.accountList.selectedItem = accountInfo;
						break;
					}
				}
			}
			
			private function onRemoveAccount(e:Event):void
			{
				if (this.accountList.selectedItem == null) return;
				IconAlert.showQuestion("Last Chance", "Are you sure you want to delete " + this.accountList.selectedItem.label + "?", onRemoveAccountConfirm);
			}
			
			private function onRemoveAccountConfirm(e:CloseEvent):void
			{
				if (this.accountList.selectedItem == null) return;
				if (e.detail == IconAlert.YES)
				{
					var dae:DeleteAccountEvent = new DeleteAccountEvent();
					dae.accountId = this.accountList.selectedItem.accountId;
					dae.dispatch();
					this.accountList.selectedItem = null;
				}
			}

			private function onCheckNow(e:Event):void
			{
				if (this.accountList.selectedItem == null) return;
				var accountId:Number = this.accountList.selectedItem.accountId;
				var cme:CheckMailEvent = new CheckMailEvent();
				cme.accountIds = [accountId];
				cme.dispatch();
			}
			
			private function onAccountListChange(e:FlexEvent):void
			{
				var list:List = e.target as List;
				if (list.selectedItem == null) return;
				if (this.ml.mainAppView == MainAppViews.INTRO)
				{
					this.ml.mainAppView = MainAppViews.STARTED;
				}
				var paie:PopulateAccountInfoEvent = new PopulateAccountInfoEvent();
				paie.accountId = list.selectedItem.accountId;
				paie.dispatch();
			}
			
			private function onAddAccount():void
			{
				this.accountList.selectedItem = null;
				this.removeAccountButton.enabled = false;
				if (this.ml.mainAppView == MainAppViews.INTRO)
				{
					this.ml.mainAppView = MainAppViews.STARTED;
				}
				this.ml.accountInfo = null;
			}
			
			public function onRightClick(e:MouseEvent):void
			{
				var data:Object = this.getData(e.target);
				if (data == null) return;
				this.accountList.selectedItem = data;
				var menu:NativeMenu = new NativeMenu();
				var checkItem:NativeMenuItem = new NativeMenuItem("Check Now");
				checkItem.addEventListener(Event.SELECT, onCheckNow);
				checkItem.enabled = (data.active);
				menu.addItem(checkItem);
				if (!data.working)
				{
					var errorItem:NativeMenuItem = new NativeMenuItem("View Error");
					errorItem.addEventListener(Event.SELECT, showErrorMessage);
					menu.addItem(errorItem);
				}
				var deleteItem:NativeMenuItem = new NativeMenuItem("Delete");
				deleteItem.addEventListener(Event.SELECT, onRemoveAccount);
				deleteItem.enabled = (this.ml.checkEmailLock) ? false : true;
				menu.addItem(deleteItem);
				menu.display(this.stage, e.stageX, e.stageY);
			}
			
			private function getData(o:Object):Object
			{
				if (o == null) return null;
				if (o is AccountListRenderer) return o.data;
				return getData(o.parent);
			}
			
			private function showErrorMessage(e:Event):void
			{
				if (this.accountList.selectedItem == null) return;
				var accountId:Number = this.accountList.selectedItem.accountId;
				var db:Database = this.ml.db;
				var responder:DatabaseResponder = new DatabaseResponder();
				var listener:Function = function(e:DatabaseEvent):void
				{
					responder.removeEventListener(DatabaseEvent.RESULT_EVENT, listener);
					var win:NativeWindow = WindowManager.getWindowByTitle(WindowManager.ERROR_VIEWER);
					if (win != null) win.close();
					var errorViewer:ErrorViewer = new ErrorViewer();
					errorViewer.errorMessage = e.data;
					errorViewer.open();
				};
				responder.addEventListener(DatabaseEvent.RESULT_EVENT, listener);
				db.getErrorMessage(responder, accountId);
			}
			
			private function onToggleSummaryWindow(e:MouseEvent):void
			{
				if (this.summaryCheckbox.selected)
				{
					if (this.ml.summaryWindow == null)
					{
						this.ml.summaryWindow = new Summary();
						this.ml.summaryWindow.setLocation(this.globalToScreen(e.stageX, e.stageY));
						this.ml.summaryWindow.open(true);
					}
					else
					{
						var screens:Array = Screen.getScreensForRectangle(this.ml.summaryWindow.nativeWindow.bounds);
						// Only reposition if the screen configuration changed such that it can't
						// reappear where it was when it was closed.
						if (screens == null || screens.length == 0)
						{
							this.ml.summaryWindow.setLocation(this.globalToScreen(e.stageX, e.stageY));
						}
						this.ml.summaryWindow.visible = true;
					}
				}
				else
				{
					if (this.ml.summaryWindow != null)
					{
						this.ml.summaryWindow.visible = false;
					}
				}
			}
			
			private function globalToScreen(x:uint, y:uint):Point
			{
				var win:NativeWindow = NativeApplication.nativeApplication.openedWindows[0];
				return win.globalToScreen(new Point(x, y));
			}
			
			private function onDragComplete(e:DragEvent):void
			{
				var list:List = e.target as List;
				if (list == null || list.dataProvider == null || list.dataProvider.length == 0) return;
				var accountData:Array = new Array();
				for (var i:uint = 0; i < list.dataProvider.length; ++i)
				{
					var account:Object = list.dataProvider.getItemAt(i);
					accountData.push({accountId:account.accountId, sortOrder:i});
				}
				var rae:ReorderAccountsEvent = new ReorderAccountsEvent();
				rae.accountData = accountData;
				rae.dispatch();
			}
		]]>
	</fx:Script>
	
	<s:layout>
		<s:VerticalLayout horizontalAlign="left"/>
	</s:layout>
	
	<s:List id="accountList"
			width="100%" height="100%"
			dragEnabled="true" dropEnabled="true" dragMoveEnabled="true" dragComplete="onDragComplete(event);"
			dataProvider="{ModelLocator.getInstance().accounts}"
			valueCommit="onAccountListChange(event);" rightClick="onRightClick(event);"
			itemRenderer="com.mailbrew.components.skins.AccountListRenderer"
			contentBackgroundColor="0xf2f2f2"/>

	<s:Group bottom="0">
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>
		<s:Button id="addAccountButton" label="Add New Account" width="130" skinClass="com.mailbrew.components.skins.AddAccountButtonSkin" click="onAddAccount();"/>
		<s:Button id="removeAccountButton" label="Remove Account" width="130" skinClass="com.mailbrew.components.skins.RemoveAccountButtonSkin" click="onRemoveAccount(event)" enabled="{(this.accountList.selectedItem == null || ModelLocator.getInstance().checkEmailLock) ? false : true}"/>
	</s:Group>	
	
	<s:CheckBox id="summaryCheckbox" label="Summary Window" click="onToggleSummaryWindow(event);" enabled="{(this.accountList.dataProvider.length &gt; 0) ? true : false}"/>
	
</s:Group>
