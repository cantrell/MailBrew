<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
         xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/halo"
		 creationComplete="onCreationComplete();">
	<fx:Script>
		<![CDATA[
			import com.mailbrew.components.skins.AccountListSkin;
			import com.mailbrew.data.AccountInfo;
			import com.mailbrew.data.AccountTypes;
			import com.mailbrew.data.MainAppViews;
			import com.mailbrew.database.Database;
			import com.mailbrew.database.DatabaseEvent;
			import com.mailbrew.database.DatabaseResponder;
			import com.mailbrew.events.DeleteAccountEvent;
			import com.mailbrew.events.PopulateAccountInfoEvent;
			import com.mailbrew.model.ModelLocator;
			
			import flash.display.NativeMenu;
			import flash.display.NativeMenuItem;
			import flash.events.Event;
			import flash.events.MouseEvent;
			
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.ListEvent;
			
			import spark.components.Label;
			import spark.events.IndexChangeEvent;
			
			private var ml:ModelLocator;
			
			private function onCreationComplete():void
			{
				this.ml = ModelLocator.getInstance();
			}
			
			private function onRemoveAccount(e:Event):void
			{
				if (this.accountList.selectedItem == null) return;
				Alert.show("Are you sure you want to delete " + this.accountList.selectedItem.label + "?",
						   "Confirm",
						   Alert.YES|Alert.NO,
						   null,
						   onRemoveAccountConfirm,
						   ml.faceSurpriseIconClass);
			}
			
			private function onRemoveAccountConfirm(e:CloseEvent):void
			{
				if (this.accountList.selectedItem == null) return;
				if (e.detail == Alert.YES)
				{
					var dae:DeleteAccountEvent = new DeleteAccountEvent();
					dae.accountId = this.accountList.selectedItem.accountId;
					dae.dispatch();
				}
			}
			
			private function onAccountListChange(e:IndexChangeEvent):void
			{
				if (this.ml.mainAppView == MainAppViews.INSTRUCTIONS)
				{
					this.ml.mainAppView = MainAppViews.WORKING;
				}
				var list:List = e.target as List;
				if (list.selectedItem == null) return;
				var paie:PopulateAccountInfoEvent = new PopulateAccountInfoEvent();
				paie.accountId = list.selectedItem.accountId;
				paie.dispatch();
			}
			
			private function onAddAccount():void
			{
				this.accountList.selectedItem = null;
				this.removeAccountButton.enabled = false;
				if (this.ml.mainAppView == MainAppViews.INSTRUCTIONS)
				{
					this.ml.mainAppView = MainAppViews.WORKING;
				}
				this.ml.accountInfo = null;
				this.ml.accountFormView = AccountTypes.IMAP;
			}
			
			public function onRightClick(e:MouseEvent):void
			{
				var data:Object = this.getData(e.target);
				if (data == null) return;
				this.accountList.selectedItem = data;
				var menu:NativeMenu = new NativeMenu();
				if (!data.working)
				{
					var errorItem:NativeMenuItem = new NativeMenuItem("View Error");
					errorItem.addEventListener(Event.SELECT, showErrorMessage);
					menu.addItem(errorItem);
				}
				var deleteItem:NativeMenuItem = new NativeMenuItem("Delete");
				deleteItem.addEventListener(Event.SELECT, onRemoveAccount);
				menu.addItem(deleteItem);
				menu.display(this.stage, e.stageX, e.stageY);
			}
			
			private function getData(o:Object):Object
			{
				if (o == null) return null;
				if (o is AccountListSkin) return o.data;
				return getData(o.parent);
			}
			
			private function showErrorMessage(e:Event):void
			{
				if (this.accountList.selectedItem == null) return;
				var accountId:Number = this.accountList.selectedItem.accountId;
				var db:Database = this.ml.db;
				var responder:DatabaseResponder = new DatabaseResponder();
				var listener:Function = function(e:DatabaseEvent):void
				{
					responder.removeEventListener(DatabaseEvent.RESULT_EVENT, listener);
					var errorViewer:ErrorViewer = new ErrorViewer();
					errorViewer.errorMessage = e.data;
					errorViewer.open();
				};
				responder.addEventListener(DatabaseEvent.RESULT_EVENT, listener);
				db.getErrorMessage(responder, accountId);
			}
		]]>
	</fx:Script>
	
	<s:List id="accountList"
			dataProvider="{ModelLocator.getInstance().accounts}"
			change="onAccountListChange(event);" rightClick="onRightClick(event);"
			bottom="40" top="0" right="0" left="0"
			itemRenderer="com.mailbrew.components.skins.AccountListSkin"/>

	<mx:Button id="addAccountButton" icon="{ModelLocator.getInstance().listAddIconClass}" click="onAddAccount();" width="40" bottom="5" left="5"/>
	<mx:Button id="removeAccountButton" icon="{ModelLocator.getInstance().listRemoveIconClass}" click="onRemoveAccount(event)" enabled="{(this.accountList.selectedItem == null) ? false : true}" width="40" bottom="5" right="5"/>
</s:Group>
