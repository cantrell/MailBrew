<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:c="com.mailbrew.components.*"
		 creationComplete="onCreationComplete();">
	<fx:Script>
		<![CDATA[
			import com.mailbrew.data.AccountInfo;
			import com.mailbrew.data.AccountSaveMode;
			import com.mailbrew.data.AccountTypes;
			import com.mailbrew.events.SaveAccountEvent;
			import com.mailbrew.events.VerifyAccountEvent;
			import com.mailbrew.model.ModelLocator;
			import com.mailbrew.util.ServiceIconFactory;
			
			import mx.binding.utils.ChangeWatcher;
			import mx.collections.ArrayCollection;
			import mx.events.PropertyChangeEvent;
			
			import spark.events.IndexChangeEvent;
			
			private var accountId:Number;
			private var ml:ModelLocator;
			
			[Bindable] private var accountTypes:ArrayCollection         = new ArrayCollection([AccountTypes.IMAP, AccountTypes.GMAIL]);
			[Bindable] private var extendedAccountTypes:ArrayCollection = new ArrayCollection([AccountTypes.IMAP, AccountTypes.GMAIL, AccountTypes.GOOGLE_WAVE, AccountTypes.GOOGLE_VOICE]);
			
			private function onCreationComplete():void
			{
				this.ml = ModelLocator.getInstance();
				ChangeWatcher.watch(this.ml, "accountInfo", onAccountInfoChange);

				if (ml.accountInfo == null)
				{
					this.changeState(AccountTypes.IMAP);
					this.onFormChange();
				}
				
				this.pickAccountListData();
			}
			
			private function onAccountInfoChange(e:PropertyChangeEvent):void
			{
				if (this.ml.accountInfo == null)
				{
					this.clearData();
					this.accountType.enabled = true;
					this.changeState(AccountTypes.IMAP);
					return;
				}
				this.changeState(this.ml.accountInfo.accountType, this.ml.accountInfo.username);
				this.accountType.enabled = false;
				this.setData(this.ml.accountInfo);
				this.ml.tracker.pageViewDetails();
			}
			
			private function onAccountTypeChange(e:IndexChangeEvent):void
			{
				// Don't execute if this is called as a result of programmatically setting the account type
				if (!accountType.enabled) return;
				this.changeState(this.accountType.selectedItem);
				this.onFormChange();
			}
			
			private function pickAccountListData():void
			{
				for each (var accountInfo:Object in this.ml.accounts)
				{
					if (accountInfo.accountType == AccountTypes.GOOGLE_VOICE || accountInfo.accountType == AccountTypes.GOOGLE_WAVE)
					{
						this.accountType.dataProvider = this.extendedAccountTypes;
						return;
					}
				}
				this.accountType.dataProvider = this.accountTypes;
			}
			
			private function changeState(newState:String, username:String = null):void
			{
				if (newState == null) newState = AccountTypes.IMAP;
				this.accountType.selectedItem = newState;
				this.serviceIcon.source = ServiceIconFactory.getSmallServiceIconClass(newState, username);
				if (newState == AccountTypes.IMAP)
				{
					this.currentState = "imap";
				}
				else if (newState == AccountTypes.GMAIL)
				{
					this.currentState = "gmail";
				}
				else if (newState == AccountTypes.GOOGLE_WAVE)
				{
					this.currentState = "wave";
				}
				else if (newState == AccountTypes.GOOGLE_VOICE)
				{
					this.currentState = "voice";
				}
			}
			
			private function onSave():void
			{
				var sae:SaveAccountEvent = new SaveAccountEvent();
				sae.accountType = this.accountType.selectedItem;
				sae.saveMode = (isNaN(this.accountId)) ? AccountSaveMode.INSERT : AccountSaveMode.UPDATE;
				sae.accountId = this.accountId;
				sae.accountName = this.accountNameInput.text;
				sae.username = this.usernameInput.text;
				sae.password = this.passwordInput.text;
				if (accountType.selectedItem == AccountTypes.IMAP)
				{
					sae.imapServer = this.imapServerInput.text;
					sae.portNumber = Number(this.portNumberInput.text);
					sae.secure = this.secureCheckBox.selected;
				}
				sae.notificationPosition = this.notificationPositionInput.selectedItem.data;
				sae.notificationSound = this.notificationSound.value;
				sae.active = this.activeCheckbox.selected;
				sae.dispatch();
				this.accountType.enabled = false;
				if (sae.saveMode == AccountSaveMode.INSERT)
				{
					this.ml.tracker.eventAddAccount(this.accountType.selectedItem);
				}
				else if (sae.saveMode == AccountSaveMode.UPDATE)
				{
					this.ml.tracker.eventEditAccount(this.accountType.selectedItem);
				}
			}
			
			public function setData(accountInfo:AccountInfo):void
			{
				this.accountId = accountInfo.accountId;
				this.accountNameInput.text = accountInfo.accountName;
				this.usernameInput.text = accountInfo.username;
				this.passwordInput.text = accountInfo.password;
				if (accountInfo.accountType == AccountTypes.IMAP)
				{
					this.imapServerInput.text = accountInfo.imapServer;
					this.portNumberInput.text = String(accountInfo.portNumber);
					this.secureCheckBox.selected = accountInfo.secure;
				}
				this.notificationPositionInput.setSelectionByData(accountInfo.notificationPosition);
				this.notificationSound.value = accountInfo.notificationSound;
				this.activeCheckbox.selected = accountInfo.active;
				this.saveButton.label = "Update";
				this.onFormChange();
			}
			
			public function clearData():void
			{
				this.enableValidators(false);
				this.accountId = NaN;
				this.accountNameInput.text = "";
				this.usernameInput.text = "";
				this.passwordInput.text = "";
				this.imapServerInput.text = "";
				this.portNumberInput.text = "";
				this.secureCheckBox.selected = false;
				this.notificationPositionInput.clearSelection();
				this.notificationSound.clearSelection();
				this.activeCheckbox.selected = true;
				this.saveButton.label = "Save";
				this.enableValidators(true);
			}
			
			private function isFormComplete():Boolean
			{
				if (this.currentState == "imap")
				{
					if (usernameInput.text.length > 0 && passwordInput.length > 0 && accountNameInput.text.length > 0 && imapServerInput.text.length > 0 && portNumberInput.text.length > 0) return true;
				}
				else
				{
					if (usernameInput.text.length > 0 && passwordInput.length > 0 && accountNameInput.text.length > 0) return true;
				}
				return false;
			}
			
			private function onFormChange():void
			{
				var formComplete:Boolean = this.isFormComplete();
				saveButton.enabled = formComplete;
				verifyButton.enabled = formComplete;
			}
			
			private function onVerify():void
			{
				if (!this.isFormComplete()) return;
				var vae:VerifyAccountEvent = new VerifyAccountEvent();
				vae.accountName = this.accountNameInput.text;
				vae.accountType = this.accountType.selectedItem;
				vae.username = this.usernameInput.text;
				vae.password = this.passwordInput.text;
				vae.server = this.imapServerInput.text;
				vae.portNumber = Number(this.portNumberInput.text);
				vae.secure = this.secureCheckBox.selected;
				vae.dispatch();
				this.ml.tracker.eventVerifyAccount();
			}
			
			private function enableValidators(enabled:Boolean):void
			{
				this.accountNameValidator.enabled = enabled;
				this.usernameValidator.enabled = enabled;
				this.passwordValidator.enabled = enabled;
				this.imapServerValidator.enabled = enabled;
				this.portNumberValidator.enabled = enabled;
			}
			
			private function extendAccountTypes(e:MouseEvent):void
			{
				this.accountType.dataProvider = extendedAccountTypes;
				this.accountType.selectedItem = null;
				this.changeState(AccountTypes.IMAP);
				this.ml.tracker.eventEasterEgg();
			}
			
		]]>
	</fx:Script>

	<s:states>
		<s:State name="imap"/>
		<s:State name="gmail"/>
		<s:State name="wave"/>
		<s:State name="voice"/>
	</s:states>
	
	<s:layout>
		<s:VerticalLayout horizontalAlign="center" gap="0"/>
	</s:layout>
	
	
	<fx:Declarations>
		<mx:StringValidator id="accountNameValidator" source="{accountNameInput}" property="text" minLength="1" requiredFieldError="Account name is required"/>
		<mx:StringValidator id="usernameValidator" source="{usernameInput}" property="text" minLength="1" requiredFieldError="User name is required"/>
		<mx:StringValidator id="passwordValidator" source="{passwordInput}" property="text" minLength="1" requiredFieldError="Password is required"/>
		<mx:StringValidator id="imapServerValidator" source="{imapServerInput}" property="text" minLength="1" requiredFieldError="IMAP server is required"/>
		<mx:NumberValidator id="portNumberValidator" source="{portNumberInput}" property="text" integerError="Port numbers must be positive whole numbers" invalidCharError="Ports are numeric" requiredFieldError="A port number is required" domain="int"/>
	</fx:Declarations>
	
	<mx:Form id="accountForm">
		<mx:FormItem label="Account Type" includeIn="imap, gmail, wave, voice" doubleClickEnabled="true" doubleClick="extendAccountTypes(event);">
			<mx:HBox verticalAlign="middle"> <!-- Work-around Flex rendering bug related to DropDownLists in Groups in Forms -->
				<s:DropDownList id="accountType" dataProvider="{accountTypes}" change="onAccountTypeChange(event);" width="115"/>
				<s:Group>
					<s:BitmapImage id="serviceIcon"/>
				</s:Group>
			</mx:HBox>
		</mx:FormItem>
		<mx:FormItem label="Account Name" required="true" includeIn="imap, gmail, wave, voice">
			<mx:TextInput id="accountNameInput" width="200" change="onFormChange();"/>
		</mx:FormItem>
		<mx:FormItem label="User Name" required="true" includeIn="imap, gmail, wave, voice">
			<mx:TextInput id="usernameInput" width="200" change="onFormChange();"/>
		</mx:FormItem>
		<mx:FormItem label="Password" required="true" includeIn="imap, gmail, wave, voice">
			<mx:TextInput id="passwordInput" width="200" displayAsPassword="true" change="onFormChange();"/>
		</mx:FormItem>
		<mx:FormItem id="imapServerLabel" required="true" label="IMAP Server" includeIn="imap">
			<mx:TextInput id="imapServerInput" width="200" change="onFormChange();"/>
		</mx:FormItem>
		<mx:FormItem id="portNumberLabel" required="true" label="Port Number" includeIn="imap">
			<mx:TextInput id="portNumberInput" width="50" change="onFormChange();"/>
		</mx:FormItem>
		<mx:FormItem id="secureLabel" label="Secure?" includeIn="imap">
			<mx:CheckBox id="secureCheckBox"/>
		</mx:FormItem>
		<mx:FormItem label="Notification Position" includeIn="imap, gmail, wave, voice">
			<c:PositionPicker id="notificationPositionInput" accountType="{accountType.selectedItem}"/>
		</mx:FormItem>
		<mx:FormItem label="Notification Sound" includeIn="imap, gmail, wave, voice">
			<c:SoundPicker id="notificationSound"/>
		</mx:FormItem>
		<mx:FormItem label="Active?" includeIn="imap, gmail, wave, voice">
			<mx:CheckBox id="activeCheckbox" selected="true"/>
		</mx:FormItem>
	</mx:Form>

	<s:HGroup>
		<s:Button id="saveButton" label="Save" click="onSave();"/>
		<s:Button id="verifyButton" label="Verify" click="onVerify();"/>
	</s:HGroup>
	
	<s:HGroup width="300" includeIn="gmail, wave, voice" paddingTop="15">
		<s:Label fontWeight="bold" text="Note:"/>
		<s:Label text="Both Gmail and Google Apps email accounts are supported." width="300" includeIn="gmail"/>
		<s:Label text="Due to lack of official APIs, Google Wave support is experimental. If it breaks, expect an application update soon." width="300" includeIn="wave"/>
		<s:Label text="Due to lack of official APIs, Google Voice support is experimental. If it breaks, expect an application update soon." width="300" includeIn="voice"/>
	</s:HGroup>

</s:Group>
