<?xml version="1.0" encoding="utf-8"?>

<s:Window xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/halo"
		  width="335" height="305" resizable="false"
		  minWidth="335" minHeight="305"
		  type="utility" showStatusBar="false"
		  creationComplete="onCreationComplete();">
	<fx:Script>
		<![CDATA[
			import com.adobe.air.preferences.Preference;
			import com.mailbrew.data.PreferenceKeys;
			import com.mailbrew.events.SavePreferencesEvent;
			import com.mailbrew.model.ModelLocator;
			import com.mailbrew.util.WindowManager;
			
			private function onCreationComplete():void
			{
				this.title = WindowManager.PREFERENCES;
				var ml:ModelLocator = ModelLocator.getInstance();
				var prefs:Preference = ml.prefs;
				this.updateIntervalStepper.value = prefs.getValue(PreferenceKeys.UPDATE_INTERVAL);
				this.notificationDisplayLengthStepper.value = prefs.getValue(PreferenceKeys.NOTIFICATION_DISPLAY_INTERVAL);
				this.idlePeriodStepper.value = prefs.getValue(PreferenceKeys.IDLE_THRESHOLD);
				try
				{
					this.startAtLoginCheckbox.selected = NativeApplication.nativeApplication.startAtLogin;
				}
				catch (e:Error)
				{
					if (e.errorID != 2014) throw e;
				}

				if (NativeApplication.supportsDockIcon)
				{
					this.currentState = "hasDock";
					this.height = 355;
					this.minHeight = 355;
					this.bounceDockIconCheckbox.selected = prefs.getValue(PreferenceKeys.BOUNCE_DOCK_ICON, false);
				}
			}
			
			private function onReset():void
			{
				
			}
			
			private function onSave():void
			{
				var spe:SavePreferencesEvent = new SavePreferencesEvent();
				spe.updateInterval = this.updateIntervalStepper.value;
				spe.idleThreshold = this.idlePeriodStepper.value;
				spe.notificationDisplayInterval = this.notificationDisplayLengthStepper.value;
				spe.bounceDockIcon = this.bounceDockIconCheckbox.selected;
				spe.startAtLogin = this.startAtLoginCheckbox.selected;
				spe.dispatch();
				this.onCancel();
			}

			private function onCancel():void
			{
				this.close();
			}
		]]>
	</fx:Script>

	<s:states>
		<s:State name="default"/>
		<s:State name="hasDock"/>
	</s:states>
	
	<s:VGroup width="100%" height="100%">

		<s:Group width="100%">
			<s:Label text="Update Interval (minutes)" fontWeight="bold" left="5" y="5"/>
			<s:Label y="20" width="211" left="5">How often should MailBrew check for new messages?</s:Label>
			<s:NumericStepper id="updateIntervalStepper" minimum="1" maximum="60" right="20" width="57" y="5"/>
		</s:Group>		
		
		<s:Group width="100%">
			<s:Label text="Notification Display Length (seconds)" fontWeight="bold" left="5" y="5" width="220"/>
			<s:Label y="20" width="210" left="5">How long should notifications be displayed?</s:Label>
			<s:NumericStepper id="notificationDisplayLengthStepper" minimum="2" maximum="30" right="20" width="57" y="5"/>
		</s:Group>		
		
		<s:Group width="100%">
			<s:Label text="Idle Period (minutes)" y="5" fontWeight="bold" left="5"/>
			<s:Label y="20" width="210" left="5">How long should you be idle (no keyboard input) before MailBrew starts queuing up notifications?</s:Label>
			<s:NumericStepper id="idlePeriodStepper" minimum="5" maximum="60" y="5" right="20"/>
		</s:Group>		
		
		<s:Group width="100%" includeIn="hasDock">
			<s:Label text="Bounce Dock Icon" fontWeight="bold" y="5" left="5"/>
			<s:Label y="20" width="210" left="5">Do you want the Dock icon to bounce when you get new messages?</s:Label>
			<s:CheckBox id="bounceDockIconCheckbox" y="5" right="20"/>
		</s:Group>

		<s:Group width="100%">
			<s:Label text="Start at Login" fontWeight="bold" y="5" left="5"/>
			<s:Label y="20" width="210" left="5">Should MailBrew start automatically when you log in?</s:Label>
			<s:CheckBox id="startAtLoginCheckbox" y="5" right="20"/>
		</s:Group>

		<s:Group width="100%">
			<s:Label text="Reset" fontWeight="bold" y="5" left="5"/>
			<s:Label y="20" width="210" left="5">Delete all account data and reset all preferences.</s:Label>
			<s:Button label="Reset" id="resetButton" click="onReset();" right="20"/>
		</s:Group>

		<s:Group width="100%">
			<s:HGroup horizontalCenter="0">
				<s:Button id="saveButton" label="Save" click="onSave();"/>
				<s:Button id="cancelButton" label="Cancel" click="onCancel();"/>
			</s:HGroup>
		</s:Group>
		
	</s:VGroup>

</s:Window>
