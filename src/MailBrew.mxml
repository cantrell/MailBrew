<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml"
		   xmlns:c="com.mailbrew.components.*"
		   layout="absolute"
		   width="500" height="400"
		   showStatusBar="false"
		   applicationComplete="onApplicationComplete();">

	<mx:Script>
		<![CDATA[
			import com.adobe.air.notification.AbstractNotification;
			import com.mailbrew.commands.AppExitCommand;
			import com.mailbrew.controller.Controller;
			import com.mailbrew.data.AccountTypes;
			import com.mailbrew.data.MainAppViews;
			import com.mailbrew.events.AppExitEvent;
			import com.mailbrew.events.DeleteAccountEvent;
			import com.mailbrew.events.InitEvent;
			import com.mailbrew.model.ModelLocator;
			
			import flash.events.Event;
			import flash.events.InvokeEvent;
			import flash.events.MouseEvent;
			import flash.events.ScreenMouseEvent;
			import flash.geom.Rectangle;
			
			import mx.binding.utils.ChangeWatcher;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ItemClickEvent;
			import mx.events.ListEvent;
			import mx.events.PropertyChangeEvent;
			import mx.messaging.events.ChannelEvent;
			
			[Bindable] private var accountTypes:Array = [AccountTypes.IMAP, AccountTypes.GMAIL, AccountTypes.GOOGLE_WAVE];
			private var controller:Controller;
			private var ml:ModelLocator;
			
			private function onApplicationComplete():void
			{
				this.nativeApplication.addEventListener(Event.EXITING, onApplicationExiting);
				this.nativeWindow.addEventListener(Event.CLOSING, onWindowClosing);
				if (NativeApplication.supportsDockIcon) // Mac
				{
					NativeApplication.nativeApplication.addEventListener(InvokeEvent.INVOKE, onShowWindow);
				}
				else // Windows
				{
					SystemTrayIcon(NativeApplication.nativeApplication.icon).addEventListener(ScreenMouseEvent.CLICK, onShowWindow);
				}
				
				this.controller = new Controller();
				this.ml = ModelLocator.getInstance();
				this.ml.statusMessage = "Welcome to MailBrew!";

				ChangeWatcher.watch(ModelLocator.getInstance(), "mainAppView", onAppViewChange);
				ChangeWatcher.watch(ModelLocator.getInstance(), "accountFormView", onAccountFormViewChange);

				this.ml.mainAppView = MainAppViews.INSTRUCTIONS;
				this.ml.accountFormView = AccountTypes.IMAP;

				var initialBounds:Rectangle = new Rectangle((Screen.mainScreen.bounds.width / 2 - (this.width/2)), (Screen.mainScreen.bounds.height / 2 - (this.height/2)), this.width, this.height);
				this.nativeWindow.bounds = initialBounds;
				this.visible = true;
				
				new InitEvent().dispatch();
			}
			
			private function onAppViewChange(e:PropertyChangeEvent):void
			{
				this.toggleMainView(ModelLocator.getInstance().mainAppView);
			}

			private function onAccountFormViewChange(e:PropertyChangeEvent):void
			{
				if (this.ml.accountFormView == AccountTypes.IMAP)
				{
					accountType.selectedIndex = 0;
					this.formView.selectedChild = imapForm;
				}
				else if (this.ml.accountFormView == AccountTypes.GMAIL)
				{
					accountType.selectedIndex = 1;
					this.formView.selectedChild = gmailForm;
				}
				else
				{
					accountType.selectedIndex = 2;
					this.formView.selectedChild = waveForm;
				}
			}

			private function toggleMainView(view:String):void
			{
				if (view == MainAppViews.INSTRUCTIONS)
				{
					this.mainAppView.selectedChild = instructionsView;
				}
				else if (view == MainAppViews.WORKING)
				{
					this.mainAppView.selectedChild = workingView;
				}
			}
			
			private function onAccountTypeChange(e:ItemClickEvent):void
			{
				this.ml.accountFormView = e.label;
			}
			
			private function onWindowClosing(e:Event):void
			{
				e.preventDefault();
				this.visible = false;
			}
			
			private function onShowWindow(e:Event):void
			{
				this.visible = true;
				this.nativeWindow.activate();
			}
			
			private function onApplicationExiting(e:Event):void
			{
				e.preventDefault();
				this.nativeApplication.removeEventListener(Event.EXITING, onApplicationExiting);
				new AppExitEvent().dispatch();
			}
		]]>
	</mx:Script>
	<c:CommandBar left="0" right="0" top="0" height="30"/>
	<c:AccountList left="0" top="30" bottom="30" width="100"/>
	<mx:ViewStack id="mainAppView" creationPolicy="all" left="100" right="0" top="30" bottom="30">
		<mx:Canvas id="instructionsView" left="0" right="0" top="0" bottom="0">
			<mx:Label text="Instructions Here..."/>
		</mx:Canvas>
		<mx:Canvas id="workingView" left="0" right="0" top="0" bottom="0">
			<mx:ToggleButtonBar id="accountType" dataProvider="{accountTypes}" itemClick="onAccountTypeChange(event);" top="0" left="50" right="50"/>
			<mx:ViewStack id="formView" creationPolicy="all" top="20">
				<c:IMAPForm id="imapForm"/>
				<c:GmailForm id="gmailForm"/>
				<c:WaveForm id="waveForm"/>
			</mx:ViewStack>
		</mx:Canvas>
	</mx:ViewStack>
	<c:Status bottom="0" left="0" right="0" height="25"/>
</mx:WindowedApplication>
