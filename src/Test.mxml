<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" applicationComplete="onApplicationComplete();" xmlns:s="library://ns.adobe.com/flex/spark">
	<mx:Script>
		<![CDATA[
			import com.mailbrew.email.EmailCounts;
			import com.mailbrew.email.EmailEvent;
			import com.mailbrew.email.EmailHeader;
			import com.mailbrew.email.IEmailService;
			import com.mailbrew.email.google.Gmail;
			import com.mailbrew.email.google.Voice;
			import com.mailbrew.email.google.Wave;
			import com.mailbrew.email.imap.IMAP;
			import com.mailbrew.notify.Notification;
			import com.mailbrew.notify.NotificationManager;
			
			//[Embed(source="assets/services/imap_64x64.png")] public var NotificationIconClass:Class;
			[Embed(source="assets/services/gmail_50x50.png")] public var NotificationIconClass:Class;
			
			private var notificationManager:NotificationManager;
			
			private function onApplicationComplete():void
			{
				// Email service tests
				
				//var emailService:IEmailService = new IMAP("fake", "fake", "imap.gmail.com", 993, true);
				//var emailService:IEmailService = new Gmail("fake", "fake");
				//var emailService:IEmailService = new Wave("fake", "fake");
				//var emailService:IEmailService = new Voice("fake", "fake");
				
				//emailService.addEventListener(EmailEvent.AUTHENTICATION_FAILED, onAuthenticationFailed);
				//emailService.addEventListener(EmailEvent.AUTHENTICATION_SUCCEEDED, onAuthenticationSucceeded);
				//emailService.addEventListener(EmailEvent.CONNECTION_FAILED, onConnectionFailed);
				//emailService.addEventListener(EmailEvent.CONNECTION_SUCCEEDED, onConnectionSucceeded);
				//emailService.addEventListener(EmailEvent.UNSEEN_EMAILS, onUnseenEmails);
				//emailService.addEventListener(EmailEvent.UNSEEN_EMAILS_COUNT, onUnseenEmailsCount);
			
				//emailService.testAccount();
				//emailService.getUnseenEmailCount();
				//emailService.getUnseenEmailHeaders();
				
				
				// Notification tests
				this.notificationManager = new NotificationManager();
			}
			
			private function addNotification():void
			{
				var subject:String = "This is the subject";
				//var message:String = "This is a very long message that wraps and wraps and wraps. It just keeps on going and going and going. In fact, it's so long that we may just never see the end of it. It might just be the longest thing ever written. We will never really know because it should get cut off, and nobody will ever see how it ends. It's a cliffhanger. I hate cliffhangers. I need to make this a little longer because it has to be over ten lines. Is it over ten lines yet? I think so!";
				var message:String = "Hi, there. You really rock. I want to pay you $1 million.";
				var notification:Notification = new Notification(subject,
                                                                 message,
																 Notification.TOP_LEFT,
																 7,
																 NotificationIconClass);
				this.notificationManager.addNotification(notification);
			}
			
			private function onAuthenticationFailed(e:EmailEvent):void
			{
				trace("onAuthenticationFailed", e.data);
			}
			
			private function onAuthenticationSucceeded(e:EmailEvent):void
			{
				trace("onAuthenticationSucceeded", e.data);
			}
			
			private function onConnectionFailed(e:EmailEvent):void
			{
				trace("onConnectionFailed", e.data);
			}
			
			private function onConnectionSucceeded(e:EmailEvent):void
			{
				trace("onConnectionSucceeded", e.data);
			}
			
			private function onUnseenEmails(e:EmailEvent):void
			{
				trace("onUnseenEmails", e.data);
				var emailHeaders:Vector.<EmailHeader> = e.data as Vector.<EmailHeader>;
				for each (var emailHeader:EmailHeader in emailHeaders)
				{
					trace("emailHeader.id", emailHeader.id);
					trace("emailHeader.from", emailHeader.from);
					trace("emailHeader.subject", emailHeader.subject);
					trace("emailHeader.summary", emailHeader.summary);
					trace("emailHeader.url", emailHeader.url);
					trace("------");
				}
			}
			
			private function onUnseenEmailsCount(e:EmailEvent):void
			{
				trace("onUnseenEmailsCount", e.data);
				var counts:EmailCounts = e.data as EmailCounts;
				trace("totalEmails", counts.totalEmails);
				trace("unseenEmails", counts.unseenEmails);
			}
			
		]]>
	</mx:Script>
	<s:Button label="Add Notification" click="addNotification();"/>
</mx:WindowedApplication>
